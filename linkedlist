#include<stdio.h>
#include <stdlib.h>
void linkedListTraversal();
struct Node
{
    int data;
    struct Node *next;
};

//Insertion of data at first place in linked list
struct Node *insertAtFirst(struct Node *head, int data)
{
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    ptr -> next = head;
    ptr -> data = data;
    return ptr;
}

//Insertion of data at n-1 place (index / in between)
struct Node *insertAtIndex(struct Node *head, int data, int index)
{
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    struct Node *p = head;

    int i = 0;

    while(i != index - 1)
    {
        p = p -> next;
        i++;
    }
    ptr -> data = data;
    ptr -> next = p -> next;
    p -> next = ptr;
    return head;
}

//Insertion of data at the end of a linked list
struct Node *insertAtEnd(struct Node *head, int data)
{
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    ptr -> data = data;
    struct Node *p = head;

    while(p -> next != NULL)
    {
        p = p-> next;
    }
    p -> next = ptr;
    ptr -> next = NULL;
    return head;
}
//Insertion of data after a particular node
struct Node *insertAfterNode(struct Node *head,struct Node *prevNode, int data)
{
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    ptr -> data = data;
    ptr -> next = prevNode -> next;
    prevNode -> next = ptr;
    return head;

}
int main()
{
    struct Node *head;
    struct Node *second;
    struct Node *third;
    struct Node *fourth;

    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));

    //Linking head node to second
    head -> data = 1;
    head -> next = second;

    second -> data = 2;
    second -> next = third;

    third -> data = 3;
    third -> next = fourth;

    fourth -> data = 4;
    fourth -> next = NULL;

    printf("Linked list before insertion\n");
    linkedListTraversal(head);
    // head = insertAtFirst(head, 25);
    // head = insertAtEnd(head, 27);
    head = insertAfterNode(head, second, 29);
    printf("Linked list after insertion\n");
    linkedListTraversal(head);
    return 0;
}

// Traversal of link list function
void linkedListTraversal(struct Node *ptr)
{
    while(ptr != NULL)
    {
        printf("Element  = %d\n", ptr -> data);
        ptr = ptr -> next;
    }
    // printf(".....No elements are remaining in the linked list\n");
}
